using OliveFramework.Model.Datatable;
using OliveFramework.Model.Response;
using OliveFramework.Page;
using OliveFramework.tool;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Web;

namespace OliveFramework.method
{
    /// <summary>
    /// PullMessage 的摘要说明
    /// </summary>
    public class PullMessage : BasePage
    {
        private DateTime _startTime ;
        protected override void OnRequest()
        {
            base.OnRequest();

            int PullTimeout = SystemConfig.MessagePullingTimeout;
            int PullSleep = SystemConfig.MessagePullingSleep;

            Server.ScriptTimeout = PullTimeout+10;
            _startTime = DateTime.Now;

            uint[] reachedMessageList = ParseReachedMessage(getParameter("reachedmessage"));

            while (_startTime.AddSeconds(PullTimeout)>= DateTime.Now)
            {
                if (!Response.IsClientConnected)
                    WriteEnd();

                
                MessageListModel messageList = GetUnreachedMessage(reachedMessageList);
                if(messageList.MessageCount>0)
                {
                    WriteSuccess<MessageListModel>(messageList);
                    WriteEnd();
                }

                Thread.Sleep(PullSleep);
            }

            WriteSuccess<String>("No message.");
        }

        private uint[] ParseReachedMessage(string reachedMessages)
        {
            if(string.IsNullOrWhiteSpace(reachedMessages))
            {
                return null;
            }

            string[] messageList = reachedMessages.Split(',');
            uint[] ReachedMessageList = new uint[messageList.Length];

            int i = 0;
            for(i=0;i<messageList.Length;i++)
            {
                ReachedMessageList[i] = uint.Parse(messageList[i]);
            }

            return ReachedMessageList;
  
        }
        
        private MessageListModel GetUnreachedMessage(uint[] ReachedMessageList)
        {
            
            List<MessageAbstractModel> messageAbstracts = new List<MessageAbstractModel>();

            List<MessageModel> recordList = Controller.Message.Instance.GetUserMessage(aid);

            foreach(MessageModel message in recordList)
            {
                if(ReachedMessageList!=null)
                {
                    if (Array.IndexOf(ReachedMessageList, message.mid)>=0)
                    {
                        continue;
                    }
                }
                MessageAbstractModel messageAbstract = new MessageAbstractModel();
                messageAbstract.ID = (uint)message.mid;
                messageAbstract.Type = (Controller.Message.MESSAGE_TYPE)message.Type;
                messageAbstract.Title = message.Title;
                messageAbstract.Status = (Controller.Message.MESSAGE_STATUS)message.Status;

                messageAbstracts.Add(messageAbstract);
            }

            MessageListModel messageList = new MessageListModel();
            messageList.MessageCount = messageAbstracts.Count;
            messageList.MessageAbstracts = messageAbstracts;

            return messageList;
        }

        class MessageListModel
        {
            public int MessageCount;
            public List<MessageAbstractModel> MessageAbstracts;

        }

        class MessageAbstractModel
        {
            public uint ID;
            public Controller.Message.MESSAGE_TYPE Type;
            public string Title;
            public Controller.Message.MESSAGE_STATUS Status;

        }

    }
}