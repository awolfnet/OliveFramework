using Newtonsoft.Json;
using OliveFramework.Model.Response;
using System;
using System.Collections.Generic;
using System.Web;
using System.Collections;


namespace OliveFramework.Page
{
    public abstract class BasePage : IHttpHandler
    {
        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
        protected HttpRequest Request;
        protected HttpResponse Response;
        protected HttpServerUtility Server;

        private string _token = "";
        protected string Token
        {
            set
            {

            }
            get
            {
                if(string.IsNullOrWhiteSpace(_token))
                {
                    _token = getParameter("token");
                }
                return _token;
            }
        }

        private Controller.Session.SESSION_STATUS? _sessionStatus=null;
        protected Controller.Session.SESSION_STATUS UserSessionStatus
        {
            set
            {

            }
            get
            {
                if(_sessionStatus!=null)
                {
                    return (Controller.Session.SESSION_STATUS)_sessionStatus;
                }

                if (string.IsNullOrWhiteSpace(Token))
                {
                    _sessionStatus = Controller.Session.SESSION_STATUS.UNKNOW;
                }
                else
                {
                    _sessionStatus = GetUserSessionStatus(Token);
                }

                return (Controller.Session.SESSION_STATUS)_sessionStatus;
            }

        }

        private System.Text.Encoding _pageEncoding=null;
        protected System.Text.Encoding PageEncoding
        {
            get
            {
                if(_pageEncoding == null)
                {
                    return System.Text.Encoding.UTF8;
                }else
                {
                    return _pageEncoding;
                }
            }
            set
            {
                _pageEncoding = value;
            }
        }

        protected string PageFile
        {
            set
            {
            }
            get
            {
                return System.IO.Path.GetFileName(Request.Path).ToString();
            }

        }

        private uint? _privilegeID = null;
        protected uint PrivilegeID
        {
            set
            {

            }
            get
            {

                if (_privilegeID != null)
                {
                    return (uint)_privilegeID;
                }

                if (string.IsNullOrWhiteSpace(this.Token))
                {
                    _privilegeID = 1;
                }
                else
                {
                    _privilegeID = GetUserPrivilege(this.Token);
                }
                

                return (uint)_privilegeID;
            }
        }

        private uint? _aid = null;
        protected uint aid
        {
            set
            {

            }
            get
            {
                if(_aid != null)
                {
                    return (uint)_aid;
                }

                if (string.IsNullOrWhiteSpace(this.Token))
                {
                    _aid = 0;
                }else
                {
                    _aid = Controller.Session.Instance.GetAccountId(Token);
                }

                return (uint)_aid;
            }
        }

        public void ProcessRequest(HttpContext context)
        {
            this.Request = context.Request;
            this.Response = context.Response;
            this.Server = context.Server;

            if (Request.Browser.Browser == "InternetExplorer")
            {
                Response.ContentType = "text/json";
            }else
            {
                Response.ContentType = "application/json";
            }

            this.OnRequest();

            Response.Charset = getCharset();
        }

        protected virtual void OnRequest()
        {
            CheckSessionStatus(UserSessionStatus);
            CheckPrivilege(PrivilegeID);

        }

        protected virtual void Write(string s)
        {
            this.Response.Write(s);
        }

        protected void WriteSuccess<T>(T t)
        {
            ResponseModel<T> response = new ResponseModel<T>(t,true,RESPONSE_CODE.SUCCESS);

            WriteJson(response);
        }

        protected void WriteEnd()
        {
            Response.End();
        }

        protected void WriteUnfulfil(string unfulfilledMessage)
        {
            ResponseModel<string> response = new ResponseModel<string>(unfulfilledMessage, true, RESPONSE_CODE.UNFULFIL);

            WriteJson(response);
        }

        protected void WriteFail(int errorCode,string errorMessage)
        {
            Hashtable ht = new Hashtable();

            ht.Add("ErrorCode", errorCode);
            ht.Add("ErrorMessage", errorMessage);

            ResponseModel<Hashtable> response = new ResponseModel<Hashtable>(ht, false,RESPONSE_CODE.FAIL);

            WriteJson(response);
        }

        protected void WriteException(Exception ex)
        {
            ResponseModel<Exception> response = new ResponseModel<Exception>(ex, false,RESPONSE_CODE.EXCEPTION);

            WriteJson(response);
        }

        protected void WriteJson(object o)
        {
            string json = JsonConvert.SerializeObject(o);
            System.Diagnostics.Debug.WriteLine("JSON Response: " + json);
            this.Response.Write(json);
        }

        protected Controller.Session.SESSION_STATUS GetUserSessionStatus(string Token)
        {
            Controller.Session.SESSION_STATUS userSessionStatus =Controller.Session.Instance.CheckSession(Token);

            return userSessionStatus;
        }

        protected uint GetUserPrivilege(string Token)
        {
            uint aid = Controller.Session.Instance.GetAccountId(Token);
            uint pid = Controller.Account.Instance.GetAccountPrivilege(aid);

            return pid;
        }

        protected void CheckPrivilege(uint PrivilegeID)
        {
            uint[] PagePrivilege;
            try
            {
                PagePrivilege = Controller.Privilege.Instance.GetPagePrivilegeList(PageFile);

                if(Array.IndexOf(PagePrivilege,PrivilegeID)<0)
                {
                    WriteFail((int)tool.Lang.getCode("/language/privilege/deny"), tool.Lang.get("/language/privilege/deny"));
                    WriteEnd();
                }
            }
            catch (ExceptionMessage ex)
            {
                WriteFail(ex.Code, ex.DisplayMessage);
                WriteEnd();
            }catch(Exception ex)
            {
                WriteException(ex);
                WriteEnd();
            }

        }

        protected void CheckSessionStatus(Controller.Session.SESSION_STATUS SessionStatus)
        {
            switch (SessionStatus)
            {
                case Controller.Session.SESSION_STATUS.AVAILABLE:
                    Controller.Session.Instance.Keepalive(Token);
                    break;
                case Controller.Session.SESSION_STATUS.NOTEXIST:
                case Controller.Session.SESSION_STATUS.EXPIRED:
                case Controller.Session.SESSION_STATUS.UNAVAILABLE:
                case Controller.Session.SESSION_STATUS.UNKNOW:
                    WriteFail((int)SessionStatus, tool.Lang.get("/language/session/session_notavailable"));
                    WriteEnd();
                    break;
            }
        }

        protected string getParameter(string key)
        {
            if (this.Request[key] != null)
            {
                return this.Request[key].Trim();
            }
                
            if(this.Request.QueryString[key]!=null)
            {
                return this.Request.QueryString[key].Trim();
            }

            if(this.Request.Cookies[key]!=null)
            {
                return this.Request.Cookies[key].Value.Trim();
            }

            return null;
        }

        protected T getModel<T>()
        {
            string inputStream = getParameter("model");
            string jsonString = HttpContext.Current.Server.UrlDecode(inputStream);
            System.Diagnostics.Debug.WriteLine("Input stream: " + jsonString);
            return JsonConvert.DeserializeObject<T>(jsonString);
        }

        protected string getInputStream()
        {
            System.IO.StreamReader inputStreamReader = new System.IO.StreamReader(Request.InputStream, PageEncoding);
            return inputStreamReader.ReadToEnd();
        }

        private string getCharset()
        {
            if(PageEncoding == System.Text.Encoding.UTF8)
            {
                return "utf-8";
            }else
            {
                return "utf-8";
            }
        }
    }
}